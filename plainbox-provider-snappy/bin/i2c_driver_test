#!/usr/bin/env python3
# Copyright 2016 Canonical Ltd.
# All rights reserved.
#
# Written by:
#    Authors: Gavin Lin <gavin.lin@canonical.com>
#             Sylvain Pineau <sylvain.pineau@canonical.com>

"""
This script will check number of detected I2C buses or devices 

To see how to use, please run "./i2c_driver_test"
"""

import os
import subprocess

from guacamole import Command


class Bus(Command):

    """Detect I2C bus."""

    def invoked(self, ctx):
        """Method called when the command is invoked."""
        # Detect I2C buses and calculate number of them
        result = subprocess.check_output(['i2cdetect', '-l'],
                                         universal_newlines=True)
        print(result)
        bus_number = len(result.splitlines())
        print('Detected buses: {}'.format(bus_number))

        # Test failed if no I2C bus detected
        if bus_number == 0:
            raise SystemExit('Test failed, no bus detected.')

        # Verify if detected number of buses is as expected
        else:
            if ctx.args.bus != 0:
                if bus_number == ctx.args.bus:
                    print('Test passed')
                else:
                    raise SystemExit('Test failed, expecting {} I2C '
                                     'buses.'.format(ctx.args.bus))

    def register_arguments(self, parser):
        """Register command line arguments for the bus sub-command."""
        parser.add_argument(
            '-b', '--bus', type=int, help='Expected number of I2C bus.',
            default=0)


class Device(Command):

    """Detect I2C device."""

    def invoked(self, ctx):
        # Make sure that we have root privileges
        if os.geteuid() != 0:
            raise SystemExit('Error: please run this command as root')
        # Calculate number of buses
        result = subprocess.check_output(['i2cdetect', '-l'],
                                         universal_newlines=True)
        bus_number = len(result.splitlines())
        print('Detected buses: {}'.format(bus_number))

        # Detect device on each bus
        exit_code = 1
        for i in range(bus_number):
            print('Checking I2C bus {}'.format(i))
            result = subprocess.check_output(['i2cdetect', '-y', str(i)],
                                             universal_newlines=True)
            print(result)
            result_line = result.splitlines()[1:]
            for l in result_line:
                address_value = l.strip('\n').split(':')[1].split()
                for v in address_value:
                    if v != '--': exit_code = 0
        if exit_code == 1:
            raise SystemExit('No I2C device detected on any I2C bus')
        else:
            print('I2C device detected')
        return exit_code


class I2cDriverTest(Command):

    """I2C driver test."""

    sub_commands = (
        ('bus', Bus),
        ('device', Device)
    )

    def invoked(self, ctx):
        """Method called when the command is invoked."""
        if not ctx.early_args.rest:
            ctx.parser.print_help()
            return 1


if __name__ == '__main__':
    I2cDriverTest().main()

