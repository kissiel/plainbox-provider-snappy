#!/usr/bin/env python3
# Copyright 2015 Canonical Ltd.
# All rights reserved.
#
# Written by:
#   Jonathan Cave <jonathan.cave@canonical.com>
#   Po-Hsu Lin <po-hsu.lin@canonical.com>


import os
import subprocess
import time

import dbus
from guacamole import Command


TEST_IP = "8.8.8.8"
GSM_CON_ID = "GSMCONN"


DBUS_PROPERTIES = 'org.freedesktop.DBus.Properties'
DBUS_OBJECTMANAGER = 'org.freedesktop.DBus.ObjectManager'

DBUS_MM1_SERVICE = 'org.freedesktop.ModemManager1'
DBUS_MM1_PATH = '/org/freedesktop/ModemManager1'
DBUS_MM1_IF = 'org.freedesktop.ModemManager1'
DBUS_MM1_IF_MODEM = 'org.freedesktop.ModemManager1.Modem'
DBUS_MM1_IF_MODEM_SIMPLE = 'org.freedesktop.ModemManager1.Modem.Simple'
DBUS_MM1_IF_MODEM_3GPP = 'org.freedesktop.ModemManager1.Modem.Modem3gpp'
DBUS_MM1_IF_MODEM_CDMA = 'org.freedesktop.ModemManager1.Modem.ModemCdma'

MMModemCapability = {
    'MM_MODEM_CAPABILITY_NONE': 0,
    'MM_MODEM_CAPABILITY_POTS': 1 << 0,
    'MM_MODEM_CAPABILITY_CDMA_EVDO': 1 << 1,
    'MM_MODEM_CAPABILITY_GSM_UMTS': 1 << 2,
    'MM_MODEM_CAPABILITY_LTE': 1 << 3,
    'MM_MODEM_CAPABILITY_LTE_ADVANCED': 1 << 4,
    'MM_MODEM_CAPABILITY_IRIDIUM': 1 << 5,
    'MM_MODEM_CAPABILITY_ANY': 0xFFFFFFFF}


class MMDbus():
    def __init__(self):
        self._bus = dbus.SystemBus()
        try:
            manager_proxy = self._bus.get_object(DBUS_MM1_SERVICE,
                                                 DBUS_MM1_PATH)
            om = dbus.Interface(manager_proxy, DBUS_OBJECTMANAGER)
            self._modems = om.GetManagedObjects()
        except dbus.exceptions.DBusException as excp:
            if (excp.get_dbus_name() ==
                    "org.freedesktop.DBus.Error.ServiceUnknown"):
                print("ERROR: " +
                      "mm-test doesn't work on ModemManager <1.0: " +
                      "{}".format(excp.get_dbus_message()))
            else:
                print("ERROR: {}".format(excp.get_dbus_message()))
            return

    def _modem_by_id(self, id):
        for m in self._modems:
            if id == (int(os.path.basename(m))):
                return m

    def get_modem_ids(self):
        modem_ids = []
        for m in self._modems:
            modem_ids.append((int(os.path.basename(m))))
        return modem_ids

    def equipment_id_to_mm_id(self, equipment_id):
        for mm_id in self.get_modem_ids():
            if equipment_id == self.get_equipment_id(mm_id):
                return mm_id

    def get_rat_support(self, mm_id):
        m = self._modem_by_id(mm_id)
        if m is not None:
            proxy = self._bus.get_object(DBUS_MM1_SERVICE, m)
            props_iface = dbus.Interface(proxy, dbus_interface=DBUS_PROPERTIES)
            return props_iface.Get(DBUS_MM1_IF_MODEM, 'CurrentCapabilities')

    def get_equipment_id(self, mm_id):
        m = self._modem_by_id(mm_id)
        if m is not None:
            proxy = self._bus.get_object(DBUS_MM1_SERVICE, m)
            props_iface = dbus.Interface(proxy, dbus_interface=DBUS_PROPERTIES)
            return props_iface.Get(DBUS_MM1_IF_MODEM, "EquipmentIdentifier")

    def get_manufacturer(self, mm_id):
        m = self._modem_by_id(mm_id)
        if m is not None:
            proxy = self._bus.get_object(DBUS_MM1_SERVICE, m)
            props_iface = dbus.Interface(proxy, dbus_interface=DBUS_PROPERTIES)
            return props_iface.Get(DBUS_MM1_IF_MODEM, 'Manufacturer')

    def get_model_name(self, mm_id):
        m = self._modem_by_id(mm_id)
        if m is not None:
            proxy = self._bus.get_object(DBUS_MM1_SERVICE, m)
            props_iface = dbus.Interface(proxy, dbus_interface=DBUS_PROPERTIES)
            return props_iface.Get(DBUS_MM1_IF_MODEM, 'Model')


def _create_3gpp_connection(wwan_if, apn):
    subprocess.check_call(["nmcli", "c", "add",
                           "con-name", GSM_CON_ID,
                           "type", "gsm",
                           "ifname", wwan_if,
                           "apn", apn])


def _wwan_radio_on():
    subprocess.check_call(["nmcli", "r", "wwan", "on"])


def _wwan_radio_off():
    subprocess.check_call(["nmcli", "r", "wwan", "off"])


def _destroy_3gpp_connection():
    subprocess.check_call(["nmcli", "c",
                           "delete", GSM_CON_ID])


def _ping_test(if_name):
    ret_code = 1
    route = subprocess.call(["ip", "route", "add", TEST_IP, "dev", if_name])
    if route == 0:
        ret_code = subprocess.check_call(["ping", "-c", "4",
                                          "-I", if_name, TEST_IP])
        subprocess.call(["ip", "route", "del", TEST_IP, "dev", if_name])
    return ret_code


class _3gppConnection(Command):

    def register_arguments(self, parser):
        parser.add_argument('wwan_control_if',  type=str,
                            help='The control interface for the device')
        parser.add_argument('wwan_net_if', type=str,
                            help='The network interface used when connected')
        parser.add_argument('apn', type=str,
                            help='The APN for data connection')

    def invoked(self, ctx):
        ret_code = 1
        try:
            _create_3gpp_connection(ctx.args.wwan_control_if, ctx.args.apn)
            _wwan_radio_on()
            time.sleep(30)
            ret_code = _ping_test(ctx.args.wwan_net_if)
        except:
            pass
        _destroy_3gpp_connection()
        _wwan_radio_off()
        return ret_code


class CountModems(Command):

    def invoked(self, ctx):
        mmdbus = MMDbus()
        print(len(mmdbus.get_modem_ids()))


class Resources(Command):

    def invoked(self, ctx):
        mmdbus = MMDbus()
        for m in mmdbus.get_modem_ids():
            print("mm_id: {}".format(m))
            cap_bits = mmdbus.get_rat_support(m)
            if cap_bits != 0:
                if (cap_bits & MMModemCapability['MM_MODEM_CAPABILITY_POTS']):
                    print("pots: supported")
                if (cap_bits &
                        MMModemCapability['MM_MODEM_CAPABILITY_CDMA_EVDO']):
                    print("cdma_evdo: supported")
                if (cap_bits &
                        MMModemCapability['MM_MODEM_CAPABILITY_GSM_UMTS']):
                    print("gsm_umts: supported")
                if (cap_bits &
                        MMModemCapability['MM_MODEM_CAPABILITY_LTE']):
                    print("lte: supported")
                if (cap_bits &
                        MMModemCapability['MM_MODEM_CAPABILITY_LTE_ADVANCED']):
                    print("lte_advanced: supported")
                if (cap_bits &
                        MMModemCapability['MM_MODEM_CAPABILITY_IRIDIUM']):
                    print("iridium: supported")
            print("hw_id: {}".format(mmdbus.get_equipment_id(m)))
            print("manufacturer: {}".format(mmdbus.get_manufacturer(m)))
            print("model: {}".format(mmdbus.get_model_name(m)))


class WWANTests(Command):

    sub_commands = (
        ('count', CountModems),
        ('resources', Resources),
        ('3gpp-connection', _3gppConnection)
    )


if __name__ == "__main__":
    WWANTests().main()
