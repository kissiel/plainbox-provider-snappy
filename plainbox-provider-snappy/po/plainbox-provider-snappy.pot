# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-01 11:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../manage.py:102
msgid "Test Definitions (Jobs)"
msgstr ""

#. Create a section with static information
#: ../manage.py:118
msgid "Test Descriptions"
msgstr ""

#. Add columns: category, id and description
#: ../manage.py:129
msgid "Category"
msgstr ""

#. Add columns: id
#: ../manage.py:130 ../manage.py:210
msgid "Test Case ID"
msgstr ""

#: ../manage.py:131
msgid "Description"
msgstr ""

#: ../manage.py:132
msgid "Command"
msgstr ""

#: ../manage.py:133
msgid "Duration"
msgstr ""

#: ../manage.py:176
msgid "{}"
msgstr ""

#. Create a section with static information
#: ../manage.py:192
msgid "Test Plan Name"
msgstr ""

#: ../manage.py:194
msgid "Test Plan ID"
msgstr ""

#: ../manage.py:211
msgid "Summary"
msgstr ""

#: ../manage.py:232
msgid "FILE"
msgstr ""

#: ../manage.py:233
msgid "path of the .xlsx file to write"
msgstr ""

#: ../manage.py:294
msgid "Plainbox Provider for Snappy devices"
msgstr ""

#. name
#: ../units/test-plan.pxu:11
msgid "QA tests for Snappy Ubuntu Core devices"
msgstr ""

#. description
#: ../units/test-plan.pxu:12
msgid ""
"QA test plan that includes all generic, reusable tests for Snappy Ubuntu "
"Core devices."
msgstr ""

#. name
#: ../units/test-plan.pxu:63
msgid "Automated QA tests for Snappy Ubuntu Core devices"
msgstr ""

#. description
#: ../units/test-plan.pxu:64
msgid ""
"QA test plan that includes all generic, reusable and automated tests for "
"Snappy Ubuntu Core devices."
msgstr ""

#. name
#: ../units/audio/category.pxu:3
msgid "Audio"
msgstr ""

#. summary
#: ../units/audio/jobs.pxu:2
msgid "Check that at least one audio playback device exits"
msgstr ""

#. summary
#: ../units/audio/jobs.pxu:14
msgid "Check that at least one audio capture device exists"
msgstr ""

#. summary
#: ../units/audio/jobs.pxu:26
msgid "Playback works"
msgstr ""

#. purpose
#: ../units/audio/jobs.pxu:27
msgid "Check if sound is played through ALSA on the default output"
msgstr ""

#. steps
#: ../units/audio/jobs.pxu:29
msgid ""
"1. Make sure speakers or headphones are connect to the device 2. Commence "
"the test"
msgstr ""

#. verification
#: ../units/audio/jobs.pxu:32
msgid "Did you hear the sound?"
msgstr ""

#. summary
#: ../units/audio/jobs.pxu:42
msgid "Captured sound matches played one (automated)"
msgstr ""

#. summary
#: ../units/audio/jobs.pxu:53
msgid "Captured sound matches played one"
msgstr ""

#. purpose
#: ../units/audio/jobs.pxu:54
msgid "Check if sound that is 'hearable' by capture device"
msgstr ""

#. steps
#: ../units/audio/jobs.pxu:56
msgid ""
"1. Connect line-out to line-in (plug the loop-back cable) 2. Commence the "
"test 3. Observe command's output 3. Check if the recorded frequency matched "
"generated one"
msgstr ""

#. description
#: ../units/audio/resource.pxu:6
msgid "Gather device info about alsa sound devices"
msgstr ""

#. name
#: ../units/audio/test-plan.pxu:3
msgid "Audio tests"
msgstr ""

#. description
#: ../units/audio/test-plan.pxu:4
msgid "QA audio tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/audio/test-plan.pxu:12
msgid "Manual audio tests"
msgstr ""

#. description
#: ../units/audio/test-plan.pxu:13
msgid "Manual audio tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/audio/test-plan.pxu:20
msgid "Automated audio tests"
msgstr ""

#. description
#: ../units/audio/test-plan.pxu:21
msgid "Automated audio tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/bluetooth/category.pxu:3
msgid "Bluetooth"
msgstr ""

#. name
#: ../units/bluetooth/category.pxu:7
msgid "Bluetooth - BlueZ Self Tests"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:3
msgid "Bluetooth input device works"
msgstr ""

#. purpose
#: ../units/bluetooth/jobs.pxu:4
msgid ""
"Check bluetooth input device work Since there's only CLI with ubuntu-core, "
"test keyboard only"
msgstr ""

#. steps
#: ../units/bluetooth/jobs.pxu:7
msgid ""
"1. Run following command to start bluetoothctl console:\n"
" sudo bluez.bluetoothctl -a\n"
"***Following steps are run in bluetoothctl console*** 2. Power on the "
"device:\n"
" power on\n"
"3. Register agent for keyboard:\n"
" agent KeyboardOnly\n"
" default-agent\n"
"4. Put controller in pairable mode:\n"
" pairable on\n"
"5. Scan nearby bluetooth device:\n"
" scan on\n"
"6. Stop Scanning after bluetooth keyboard is found:\n"
" scan off\n"
"7. Pair bluetooth\n"
" pair [MAC address of bluetooth keyboard]\n"
"8. Enter PIN Code on bluetooth keyboard if needed 9. Trust the bluetooth "
"keyboard\n"
" trust [MAC address of bluetooth keyboard]\n"
"10. Connect to bluetooth keyboard:\n"
" connect [MAC address of bluetooth keyboard]\n"
"11. Quit bluetoothctl console\n"
" quit\n"
"12. Use bluetooth keyboard to input"
msgstr ""

#. verification
#: ../units/bluetooth/jobs.pxu:32
msgid "Can input from bluetooth input device"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:44
msgid "{bluez-internal-rfcomm-test}"
msgstr ""

#. description
#: ../units/bluetooth/jobs.pxu:45
msgid "Runs a specific test from the rfcomm test suite"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:59
msgid "{bluez-internal-hci-test}"
msgstr ""

#. description
#: ../units/bluetooth/jobs.pxu:60
msgid "Runs a specific test from the hci test suite"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:74
msgid "{bluez-internal-mgmt-test}"
msgstr ""

#. description
#: ../units/bluetooth/jobs.pxu:75
msgid "Runs a specific test from the mgmt test suite"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:89
msgid "{bluez-internal-uc-test}"
msgstr ""

#. description
#: ../units/bluetooth/jobs.pxu:90
msgid "Runs a specific test from the user channel test suite"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:104
msgid "{bluez-internal-bnep-test}"
msgstr ""

#. description
#: ../units/bluetooth/jobs.pxu:105
msgid "Runs a specific test from the bnep test suite"
msgstr ""

#. summary
#: ../units/bluetooth/jobs.pxu:115
msgid "Bluetooth keyboard works"
msgstr ""

#. purpose
#: ../units/bluetooth/jobs.pxu:116
msgid "Check if bluetooth keyboard works"
msgstr ""

#. verification
#: ../units/bluetooth/jobs.pxu:118
msgid "Did the keyboard work?"
msgstr ""

#. summary
#: ../units/bluetooth/resource.pxu:4
msgid "Gather list of tests provided by bluez rfcomm test binary"
msgstr ""

#. description
#: ../units/bluetooth/resource.pxu:5
msgid ""
"Bluez includes some internal test that exercise the stack. This resource "
"collects a list of the provided rfcomm tests."
msgstr ""

#. summary
#: ../units/bluetooth/resource.pxu:20
msgid "Gather list of tests provided by bluez hci test binary"
msgstr ""

#. description
#: ../units/bluetooth/resource.pxu:21
msgid ""
"Bluez includes some internal test that exercise the stack. This resource "
"collects a list of the provided hci tests."
msgstr ""

#. summary
#: ../units/bluetooth/resource.pxu:36
msgid "Gather list of tests provided by bluez mgmt test binary"
msgstr ""

#. description
#: ../units/bluetooth/resource.pxu:37
msgid ""
"Bluez includes some internal test that exercise the stack. This resource "
"collects a list of the provided mgmt tests."
msgstr ""

#. summary
#: ../units/bluetooth/resource.pxu:52
msgid "Gather list of tests provided by bluez user channel test binary"
msgstr ""

#. description
#: ../units/bluetooth/resource.pxu:53
msgid ""
"Bluez includes some internal test that exercise the stack. This resource "
"collects a list of the provided user channel tests."
msgstr ""

#. summary
#: ../units/bluetooth/resource.pxu:68
msgid "Gather list of tests provided by bluez bnep test binary"
msgstr ""

#. description
#: ../units/bluetooth/resource.pxu:69
msgid ""
"Bluez includes some internal test that exercise the stack. This resource "
"collects a list of the provided bnep tests."
msgstr ""

#. name
#: ../units/bluetooth/test-plan.pxu:3
msgid "Bluetooth tests"
msgstr ""

#. description
#: ../units/bluetooth/test-plan.pxu:4
msgid "QA tests for Bluetooth"
msgstr ""

#. name
#: ../units/bluetooth/test-plan.pxu:13
msgid "Manual Bluetooth tests"
msgstr ""

#. description
#: ../units/bluetooth/test-plan.pxu:14
msgid "Manual QA tests for Bluetooth"
msgstr ""

#. description
#: ../units/bluetooth/test-plan.pxu:23
msgid "Automated tests for bluez"
msgstr ""

#. name
#: ../units/cpu/category.pxu:3
msgid "CPU"
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:12
msgid "Test the CPU scaling capabilities"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:14
msgid ""
"Use Firmware Test Suite (fwts cpufreq) to test the scaling capabilities of "
"the CPU."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:24
msgid "Attach CPU scaling capabilities log"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:26
msgid ""
"Attaches the log generated by cpu/scaling_test to the results submission."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:40
msgid "Test that the CPU can run at its max frequency"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:42
msgid ""
"Use the Firmware Test Suite (fwts cpufreq) to ensure that the CPU can run at "
"its maximum frequency."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:52
msgid "Attach CPU max frequency log"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:54
msgid ""
"Attaches the log generated by cpu/maxfreq_test to the results submission."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:62
msgid "Tests the CPU for clock jitter"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:64
msgid "Runs a test for clock jitter on SMP machines."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:73
msgid "Test offlining of each CPU core"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:75
msgid "Attempts to offline each core in a multicore system."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:84
msgid "Check CPU topology for accuracy between proc and sysfs"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:86
msgid ""
"Parses information about CPU topology provided by proc and sysfs and checks "
"that they are consistent."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:96
msgid "Validate that the Vector Floating Point Unit is running on ARM device"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:98
msgid "Validate that the Vector Floating Point Unit is running on ARM device."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:108
msgid "Run C-States tests"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:110
msgid ""
"Uses the Firmware Test Suite (fwts) to test the power saving states of the "
"CPU."
msgstr ""

#. summary
#: ../units/cpu/jobs.pxu:123
msgid "Attach C-States test log"
msgstr ""

#. description
#: ../units/cpu/jobs.pxu:125
msgid "Attaches the FWTS desktop diagnosis results log to the submission."
msgstr ""

#. name
#: ../units/cpu/test-plan.pxu:3
msgid "CPU tests"
msgstr ""

#. description
#: ../units/cpu/test-plan.pxu:4
msgid "QA CPU tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/cpu/test-plan.pxu:11
msgid "Automated CPU tests"
msgstr ""

#. description
#: ../units/cpu/test-plan.pxu:12
msgid "Automated CPU tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/disk/category.pxu:3
msgid "Disk"
msgstr ""

#. summary
#: ../units/disk/jobs.pxu:3
msgid "Gathers information about each disk detected"
msgstr ""

#. description
#: ../units/disk/jobs.pxu:4
msgid ""
"Uses lsblk to gather information about each disk detected on the system "
"under test."
msgstr ""

#. summary
#: ../units/disk/jobs.pxu:22
msgid "Disk statistics for {product}"
msgstr ""

#. description
#: ../units/disk/jobs.pxu:23
msgid ""
"This test checks disk stats, generates some activity and rechecks stats to "
"verify they've changed. It also verifies that disks appear in the various "
"files they're supposed to."
msgstr ""

#. description
#: ../units/disk/jobs.pxu:23
msgid "This test will inspect the following disk:"
msgstr ""

#. description
#: ../units/disk/jobs.pxu:23
msgid ""
"    product name: {product}\n"
"    sysfs path: {path}\n"
"    device node path: /dev/{name}"
msgstr ""

#. summary
#: ../units/disk/jobs.pxu:42
msgid "Disk performance test for {product}"
msgstr ""

#. description
#: ../units/disk/jobs.pxu:43
msgid "Verify that disk storage performs at or above baseline performance"
msgstr ""

#. summary
#: ../units/disk/jobs.pxu:56
msgid "Disk I/O stress test for {product}"
msgstr ""

#. description
#: ../units/disk/jobs.pxu:57
msgid "Take the path of the storage device and test is it a block device"
msgstr ""

#. name
#: ../units/disk/test-plan.pxu:3
msgid "Disks tests"
msgstr ""

#. description
#: ../units/disk/test-plan.pxu:4
msgid "QA disk tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/disk/test-plan.pxu:11
msgid "Automated disk tests"
msgstr ""

#. description
#: ../units/disk/test-plan.pxu:12
msgid "Automated disk tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/ethernet/category.pxu:3
msgid "Ethernet"
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:2
msgid "Report info about available network devices"
msgstr ""

#. description
#: ../units/ethernet/jobs.pxu:4
msgid ""
"Test to detect and return information about available network controllers on "
"the system under test."
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:20
msgid "Can ping another machine over Ethernet port {interface}"
msgstr ""

#. description
#: ../units/ethernet/jobs.pxu:21
msgid "Check Ethernet works by pinging another machine"
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:33
msgid "Wake on LAN (WOL) test from S5 - {interface}"
msgstr ""

#. purpose
#: ../units/ethernet/jobs.pxu:34
msgid ""
"Check that another system can wake up from S5 the SUT using ethernet port "
"{interface} WOL function."
msgstr ""

#. steps
#: ../units/ethernet/jobs.pxu:36
msgid ""
"1. Ensure there is an ethernet cable attached to port {interface}. 2. Press "
"Enter to power off the system. 3. From another computer on the same network "
"run the following command:\n"
"   $ wakeonlan {mac}\n"
"   If wakeonlan tool is not installed run:\n"
"   $ sudo apt install wakeonlan"
msgstr ""

#. verification
#: ../units/ethernet/jobs.pxu:43
msgid " Did the SUT wake up from S5?"
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:56
msgid "Wake on LAN (WOL) test from S3 - {interface}"
msgstr ""

#. purpose
#: ../units/ethernet/jobs.pxu:57
msgid ""
"Check that another system can wake up from S3 the SUT using ethernet port "
"{interface} WOL function."
msgstr ""

#. steps
#: ../units/ethernet/jobs.pxu:59
msgid ""
"1. Ensure there is an ethernet cable attached to port {interface}. 2. Press "
"Enter to suspend the system. 3. From another computer on the same network "
"run the following command:\n"
"   $ wakeonlan {mac}\n"
"   If wakeonlan tool is not installed run:\n"
"   $ sudo apt install wakeonlan"
msgstr ""

#. verification
#: ../units/ethernet/jobs.pxu:66
msgid " Did the SUT wake up from S3?"
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:82
msgid "Ensure ethernet port {{ interface }} is physically disconnected"
msgstr ""

#. purpose
#: ../units/ethernet/jobs.pxu:83
msgid ""
"Check that ethernet port {{ interface }} is detected as being in the correct "
"state to begin a hotplug connection test."
msgstr ""

#. steps
#: ../units/ethernet/jobs.pxu:86
msgid ""
"1. Ensure there is no ethernet cable attached to port {{ interface }}. 2. "
"Begin test."
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:106
msgid "Ethernet port {interface} hotplug detection test"
msgstr ""

#. purpose
#: ../units/ethernet/jobs.pxu:107
msgid ""
"Check ethernet port {interface} connects when cable inserted. Assumes an IP "
"address will be assigned by DHCP. Connection asserted by pinging the network "
"defined gateway."
msgstr ""

#. steps
#: ../units/ethernet/jobs.pxu:111
msgid ""
"1. Begin the test. 2. Insert the ethernet cable in to ethernet port "
"{interface}. 3. This test will timeout and fail if the insertion and "
"connection\n"
"   establishment has not been detected (10 second timeout for each check)."
msgstr ""

#. summary
#: ../units/ethernet/jobs.pxu:159
msgid "Ethernet port {interface} hotplug disconnect step"
msgstr ""

#. purpose
#: ../units/ethernet/jobs.pxu:160
msgid ""
"Check that when cable removed from ethernet port {interface} the system "
"detects this correctly."
msgstr ""

#. steps
#: ../units/ethernet/jobs.pxu:163
msgid ""
"1. Depends on previous hotplug connection test passing. We will now test\n"
" cable disconnection.\n"
"2. Begin the test. 3. Remove the ethernet cable from ethernet port "
"{interface}. 4. This test will timeout and fail if the removal has not been "
"detected and\n"
" interface marked as down (10 second timeout for each check)."
msgstr ""

#. name
#: ../units/ethernet/test-plan.pxu:3
msgid "QA tests for ethernet"
msgstr ""

#. description
#: ../units/ethernet/test-plan.pxu:4
msgid "Ethernet tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/ethernet/test-plan.pxu:13
msgid "Manual ethernet tests"
msgstr ""

#. description
#: ../units/ethernet/test-plan.pxu:14
msgid "Manual tests for ethernet connections"
msgstr ""

#. name
#: ../units/ethernet/test-plan.pxu:22
msgid "Automated ethernet tests"
msgstr ""

#. description
#: ../units/ethernet/test-plan.pxu:23
msgid "Automated ethernet tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/i2c/category.pxu:9
msgid "I2C (Inter-Integrated Circuit)"
msgstr ""

#. summary
#: ../units/i2c/jobs.pxu:9
msgid "Check number of detected I2C bus"
msgstr ""

#. purpose
#: ../units/i2c/jobs.pxu:10
msgid "Verify if number of detected I2C bus is as expected"
msgstr ""

#. steps
#: ../units/i2c/jobs.pxu:12
msgid ""
"1. This task is fully automatic, when expected i2c bus "
"number($I2C_BUS_NUMBER)\n"
"   is set, this job will verify if detected number of i2c bus is as "
"expected.\n"
"2. If expected i2c bus number is not set, this job will pass if system\n"
"   detected there's at least one i2c bus."
msgstr ""

#. summary
#: ../units/i2c/jobs.pxu:33
msgid "Check if any I2C device detected"
msgstr ""

#. purpose
#: ../units/i2c/jobs.pxu:34
msgid "Verify if there's any I2C device"
msgstr ""

#. steps
#: ../units/i2c/jobs.pxu:36
msgid ""
"1. This task is fully automatic, test will pass if there's at least one\n"
"   i2c device detected on any I2C bus."
msgstr ""

#. name
#: ../units/i2c/manifest.pxu:9
msgid "I2C"
msgstr ""

#. name
#: ../units/i2c/test-plan.pxu:3
msgid "I2c tests"
msgstr ""

#. description
#: ../units/i2c/test-plan.pxu:4
msgid "QA i2c tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/i2c/test-plan.pxu:11
msgid "Automated i2c tests"
msgstr ""

#. description
#: ../units/i2c/test-plan.pxu:12
msgid "Automated i2c tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/led/category.pxu:3
msgid "LEDs"
msgstr ""

#. summary
#: ../units/led/jobs.pxu:2
msgid "Power LED behavior when powered"
msgstr ""

#. purpose
#: ../units/led/jobs.pxu:3
msgid "Check power led is on when system is powered on"
msgstr ""

#. steps
#: ../units/led/jobs.pxu:5
msgid "1. Check power led when system is powered on"
msgstr ""

#. verification
#: ../units/led/jobs.pxu:7 ../units/suspend/jobs.pxu:116
msgid "Power led is on when system is powered on"
msgstr ""

#. summary
#: ../units/led/jobs.pxu:14
msgid "Power LED behavior when suspended"
msgstr ""

#. purpose
#: ../units/led/jobs.pxu:15
msgid "Check power led is blinking when system is in suspend"
msgstr ""

#. steps
#: ../units/led/jobs.pxu:17
msgid "1. Suspend the system 2. Check power led when system is in suspend"
msgstr ""

#. verification
#: ../units/led/jobs.pxu:20
msgid "Power led is blinking when system is in suspend"
msgstr ""

#. summary
#: ../units/led/jobs.pxu:27
msgid "Bluetooth LED behavior"
msgstr ""

#. purpose
#: ../units/led/jobs.pxu:28
msgid "Check bluetooth LED behavior is correct"
msgstr ""

#. steps
#: ../units/led/jobs.pxu:30
msgid ""
"1. Run following command to start bluetoothctl console:\n"
" sudo bluez.bluetoothctl -a\n"
"***Following steps are run in bluetoothctl console*** 2. Power on the "
"device:\n"
" power on\n"
"3. Power off the device:\n"
" power off\n"
"4. Quit bluetoothctl console\n"
" quit"
msgstr ""

#. verification
#: ../units/led/jobs.pxu:40
msgid "Bluetooth LED is turned on in step 2, and turned off in step 3."
msgstr ""

#. summary
#: ../units/led/jobs.pxu:47
msgid "Serial ports LED behavior"
msgstr ""

#. purpose
#: ../units/led/jobs.pxu:48
msgid "Check serial ports LED behavior is correct"
msgstr ""

#. steps
#: ../units/led/jobs.pxu:50
msgid "1. Start the test to send data to all serial ports (/dev/ttyS*)"
msgstr ""

#. verification
#: ../units/led/jobs.pxu:52
msgid "All serial ports LED are on for a few seconds (3-4s)"
msgstr ""

#. name
#: ../units/led/test-plan.pxu:3
msgid "Led tests"
msgstr ""

#. description
#: ../units/led/test-plan.pxu:4
msgid "QA LED tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/led/test-plan.pxu:11
msgid "Manual LED tests"
msgstr ""

#. description
#: ../units/led/test-plan.pxu:12
msgid "Manual LED tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/location/category.pxu:3
msgid "Location Service"
msgstr ""

#. purpose
#: ../units/location/jobs.pxu:19
msgid "Queries the status of a service instance"
msgstr ""

#. steps
#: ../units/location/jobs.pxu:21
msgid ""
"1. Type the following command in a second terminal to run the location "
"service status:\n"
"   $ locationd.status"
msgstr ""

#. verification
#: ../units/location/jobs.pxu:24
msgid " Did the command succeed?"
msgstr ""

#. purpose
#: ../units/location/jobs.pxu:33
msgid "Connects to a location service instance, monitoring its activity."
msgstr ""

#. steps
#: ../units/location/jobs.pxu:35
msgid ""
"1. Type the following command in a second terminal to run the location "
"service monitor:\n"
"   $ timeout 15m bash -c 'locationd.monitor | grep -m1 --line-buffered \".*"
"\"'"
msgstr ""

#. verification
#: ../units/location/jobs.pxu:38
msgid " Did the command succeed (it can take up to 15m from a cold start)?"
msgstr ""

#. name
#: ../units/location/test-plan.pxu:3
msgid "Location Service tests"
msgstr ""

#. description
#: ../units/location/test-plan.pxu:4
msgid "QA location service tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/location/test-plan.pxu:12
msgid "Automated location service tests"
msgstr ""

#. name
#: ../units/location/test-plan.pxu:20
msgid "Manual location service tests"
msgstr ""

#. description
#: ../units/location/test-plan.pxu:21
msgid "Automated location service tests for Snappy Ubuntu Core devices"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:11
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Multimedia Card (MMC) media\n"
"STEPS:\n"
"    1. Commence the test and then insert an MMC card into the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:31
msgid ""
"This test is automated and executes after the mediacard/mmc-insert test is "
"run. It tests reading and writing to the MMC card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:43
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of the MMC card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the MMC card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:64
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of an UNLOCKED Secure Digital (SD) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert an UNLOCKED SD card into the "
"reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:84
msgid ""
"This test is automated and executes after the mediacard/sd-insert test is "
"run. It tests reading and writing to the SD card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:96
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of an SD card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the SD card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:117
msgid ""
"This is a fully automated version of mediacard/sd-automated and assumes that "
"the system under test has a memory card device plugged in prior to checkbox "
"execution. It is intended for SRU automated testing."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:130
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a UNLOCKED Secure Digital High-Capacity\n"
"    (SDHC) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert an UNLOCKED SDHC card into the "
"reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:151
msgid ""
"This test is automated and executes after the mediacard/sdhc-insert test is "
"run. It tests reading and writing to the SDHC card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:163
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of an SDHC card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the SDHC card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:184
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Compact Flash (CF) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert a CF card into the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:204
msgid ""
"This test is automated and executes after the mediacard/cf-insert test is "
"run. It tests reading and writing to the CF card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:216
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of a CF card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the CF card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:237
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Secure Digital Extended Capacity (SDXC) media "
"card\n"
"STEPS:\n"
"    1. Commence the test and then insert an UNLOCKED SDXC card into the "
"reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:257
msgid ""
"This test is automated and executes after the mediacard/sdxc-insert test is "
"run. It tests reading and writing to the SDXC card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:269
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of a SDXC card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the SDXC card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:290
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Memory Stick (MS) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert a MS card into the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:310
msgid ""
"This test is automated and executes after the mediacard/ms-insert test is "
"run. It tests reading and writing to the MS card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:322
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of a MS card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the MS card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:343
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Memory Stick Pro (MSP) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert a MSP card into the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:363
msgid ""
"This test is automated and executes after the mediacard/msp-insert test is "
"run. It tests reading and writing to the MSP card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:375
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of a MSP card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and remove the MSP card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:396
msgid ""
"PURPOSE:\n"
"    This test will check that the systems media card reader can\n"
"    detect the insertion of a Extreme Digital (xD) media card\n"
"STEPS:\n"
"    1. Commence the test and then insert a xD card into the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"    2. Do not remove the device after this test.\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:416
msgid ""
"This test is automated and executes after the mediacard/xd-insert test is "
"run. It tests reading and writing to the xD card."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:428
msgid ""
"PURPOSE:\n"
"    This test will check that the system correctly detects\n"
"    the removal of a xD card from the systems card reader.\n"
"STEPS:\n"
"    1. Commence the test and then remove the xD card from the reader.\n"
"       (Note: this test will time-out after 20 seconds.)\n"
"VERIFICATION:\n"
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:447
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert SD card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:464
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert SDHC card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:481
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert MMC card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:498
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert CF card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:515
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert SDXC card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:532
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert MS card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:549
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert MSP card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. description
#: ../units/mediacard/jobs.pxu:566
msgid ""
"PURPOSE:\n"
"    This test will check your Media Card data transfer performance.\n"
"STEPS:\n"
"    1. Insert xD card into the reader slot on this computer.\n"
"    2. Commence the test.\n"
"VERIFICATION:\n"
"    Did the results of the test match the expected performance of the "
"inserted device?"
msgstr ""

#. name
#: ../units/mediacard/test-plan.pxu:3
msgid "Mediacard tests"
msgstr ""

#. description
#: ../units/mediacard/test-plan.pxu:4
msgid "QA mediacard tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/mediacard/test-plan.pxu:13
msgid "Manual mediacard tests"
msgstr ""

#. description
#: ../units/mediacard/test-plan.pxu:14
msgid "Manual mediacard tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/mediacard/test-plan.pxu:23
msgid "Automated mediacard tests"
msgstr ""

#. description
#: ../units/mediacard/test-plan.pxu:24
msgid "Automated mediacard tests for Snappy Ubuntu Core devices"
msgstr ""

#. summary
#: ../units/memory/jobs.pxu:7
msgid "Check amount of memory reported by meminfo against DMI"
msgstr ""

#. description
#: ../units/memory/jobs.pxu:9
msgid ""
"This test checks the amount of memory which is reporting in meminfo against "
"the size of the memory modules detected by DMI."
msgstr ""

#. summary
#: ../units/memory/jobs.pxu:21
msgid "Run memory stress test including swapping to disk"
msgstr ""

#. description
#: ../units/memory/jobs.pxu:23
msgid ""
"Test to perform some basic stress and exercise of system memory. This test "
"also includes an over-commit function to force swapping to disk, thus SUTs "
"should have suitably large swap files for the amount of RAM they have "
"installed."
msgstr ""

#. name
#: ../units/memory/test-plan.pxu:3
msgid "Memory tests"
msgstr ""

#. description
#: ../units/memory/test-plan.pxu:4
msgid "QA memory tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/memory/test-plan.pxu:11
msgid "Automated memory tests"
msgstr ""

#. description
#: ../units/memory/test-plan.pxu:12
msgid "Automated memory tests for Ubuntu Core devices"
msgstr ""

#. name
#: ../units/monitor/category.pxu:3
msgid "Display"
msgstr ""

#. summary
#: ../units/monitor/jobs.pxu:2
msgid "Monitor works (DVI)"
msgstr ""

#. purpose
#: ../units/monitor/jobs.pxu:3
msgid "Check output to display through DVI port"
msgstr ""

#. steps
#: ../units/monitor/jobs.pxu:5
msgid "1. Connect display to DVI port 2. Check the display"
msgstr ""

#. summary
#: ../units/monitor/jobs.pxu:15
msgid "Monitor works (HDMI)"
msgstr ""

#. purpose
#: ../units/monitor/jobs.pxu:16
msgid "Check output to display through HDMI port"
msgstr ""

#. steps
#: ../units/monitor/jobs.pxu:18
msgid "1. Connect display to HDMI port 2. Check the display"
msgstr ""

#. summary
#: ../units/monitor/jobs.pxu:28
msgid "Monitor works (DVI-to-VGA)"
msgstr ""

#. purpose
#: ../units/monitor/jobs.pxu:29
msgid "Check output to display through VGA adaptor on DVI port"
msgstr ""

#. steps
#: ../units/monitor/jobs.pxu:31
msgid "1. Connect display to VGA adaptor on DVI port 2. Check the display"
msgstr ""

#. summary
#: ../units/monitor/jobs.pxu:41
msgid "Monitor works (HDMI-to-VGA)"
msgstr ""

#. purpose
#: ../units/monitor/jobs.pxu:42
msgid "Check output to display through VGA adaptor on HDMI port"
msgstr ""

#. steps
#: ../units/monitor/jobs.pxu:44
msgid "1. Connect display to VGA adaptor on HDMI port 2. Check the display"
msgstr ""

#. verification
#: ../units/monitor/jobs.pxu:47 ../units/suspend/jobs.pxu:176
msgid "Output to display works"
msgstr ""

#. purpose
#: ../units/monitor/jobs.pxu:56
msgid ""
"    This test will check the DisplayPort port and the ability to do "
"hotplugging."
msgstr ""

#. steps
#: ../units/monitor/jobs.pxu:58
msgid ""
"    Skip this test if your system does not have a DisplayPort port.\n"
"    1. If a display is already connected, unplug it.\n"
"    2. (Re-)Connect a display to the DisplayPort port on your system"
msgstr ""

#. verification
#: ../units/monitor/jobs.pxu:62
msgid "    Was the interface displayed correctly on the screen?"
msgstr ""

#. name
#: ../units/monitor/test-plan.pxu:3
msgid "Monitor tests"
msgstr ""

#. description
#: ../units/monitor/test-plan.pxu:4
msgid "QA monitor tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/monitor/test-plan.pxu:11
msgid "Manual monitor tests"
msgstr ""

#. description
#: ../units/monitor/test-plan.pxu:12
msgid "Manual monitor tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/power/category.pxu:3
msgid "Power and Power Management"
msgstr ""

#. summary
#: ../units/power/jobs.pxu:2
msgid "System can be powered off"
msgstr ""

#. purpose
#: ../units/power/jobs.pxu:3
msgid "Check system can poweroff successfully"
msgstr ""

#. steps
#: ../units/power/jobs.pxu:5
msgid ""
"1. Execute following command:\n"
" sudo poweroff"
msgstr ""

#. verification
#: ../units/power/jobs.pxu:8
msgid "System poweroff successfully"
msgstr ""

#. summary
#: ../units/power/jobs.pxu:15
msgid "System can be rebooted"
msgstr ""

#. purpose
#: ../units/power/jobs.pxu:16
msgid "Check system can reboot"
msgstr ""

#. steps
#: ../units/power/jobs.pxu:18
msgid ""
"1. Execute following command:\n"
" sudo reboot"
msgstr ""

#. verification
#: ../units/power/jobs.pxu:21
msgid "    System reboot into system successfully"
msgstr ""

#. name
#: ../units/power/test-plan.pxu:3
msgid "Power tests"
msgstr ""

#. description
#: ../units/power/test-plan.pxu:4
msgid "QA power tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/power/test-plan.pxu:11
msgid "Manual power tests"
msgstr ""

#. description
#: ../units/power/test-plan.pxu:12
msgid "Manual power tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/rtc/category.pxu:3
msgid "Real Time Clock (RTC)"
msgstr ""

#. summary
#: ../units/rtc/jobs.pxu:2
msgid "RTC battery tracks the time"
msgstr ""

#. purpose
#: ../units/rtc/jobs.pxu:3
msgid "RTC battery backup power can send system wakeup event"
msgstr ""

#. steps
#: ../units/rtc/jobs.pxu:5
msgid "1. Start the test to poweroff the system (wakeup scheduled in 30s)"
msgstr ""

#. verification
#: ../units/rtc/jobs.pxu:7
msgid "RTC can wake up the system successfully"
msgstr ""

#. name
#: ../units/rtc/test-plan.pxu:3
msgid "RTC tests"
msgstr ""

#. description
#: ../units/rtc/test-plan.pxu:4
msgid "QA RTC tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/rtc/test-plan.pxu:11
msgid "Manual RTC tests"
msgstr ""

#. description
#: ../units/rtc/test-plan.pxu:12
msgid "Manual RTC tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/security/category.pxu:3
msgid "Security"
msgstr ""

#. description
#: ../units/security/jobs.pxu:25
msgid "{name}"
msgstr ""

#. summary
#: ../units/security/resource.pxu:3
msgid "Gather all kernel-security-tests"
msgstr ""

#. description
#: ../units/security/resource.pxu:4
msgid "Generate list of test cases from test_security_kernel module"
msgstr ""

#. name
#: ../units/security/test-plan.pxu:3
msgid "Kernel-security tests"
msgstr ""

#. description
#: ../units/security/test-plan.pxu:4
msgid "Collection of tests from QA Regression Testing repository"
msgstr ""

#. name
#: ../units/security/test-plan.pxu:12
msgid "Automated kernel-security tests"
msgstr ""

#. description
#: ../units/security/test-plan.pxu:13
msgid "Automated kernel-security tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/security/test-plan.pxu:24
msgid "Kernel-security tests (tainted)"
msgstr ""

#. description
#: ../units/security/test-plan.pxu:25
msgid "Kernel-security from QA Regression Testing (ignoring tainting)"
msgstr ""

#. name
#: ../units/security/test-plan.pxu:33
msgid "Automated kernel-security tests (tainted)"
msgstr ""

#. description
#: ../units/security/test-plan.pxu:34
msgid "Automated kernel-security tests (ignoring tainting)"
msgstr ""

#. name
#: ../units/serial/category.pxu:3
msgid "Serial Port"
msgstr ""

#. summary
#: ../units/serial/jobs.pxu:2
msgid "Serial debugging console is enabled and operational"
msgstr ""

#. purpose
#: ../units/serial/jobs.pxu:3
msgid "Check user can log into system through serial port from another machine"
msgstr ""

#. steps
#: ../units/serial/jobs.pxu:5
msgid ""
"1. Connect USB to db9 null modem adapter cable to serial port of test "
"machine 2. Connect the cable to USB port of another ubuntu machine (client) "
"3. Install screen on client (if not done in Prerequisite) 4. Execute "
"following command on client:\n"
" sudo screen /dev/ttyUSB0\n"
"5. Start getty service on test machine:\n"
" sudo systemctl start getty@[rs232 device, ex. /dev/ttyS0].service\n"
"6. Log into the test machine from terminal on client"
msgstr ""

#. verification
#: ../units/serial/jobs.pxu:14
msgid ""
"1. Output to client is fine after getty service started 2. Log into test "
"machine from terminal on client successfully"
msgstr ""

#. name
#: ../units/serial/test-plan.pxu:3
msgid "Serial tests"
msgstr ""

#. description
#: ../units/serial/test-plan.pxu:4
msgid "QA serial tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/serial/test-plan.pxu:11
msgid "Manual serial tests"
msgstr ""

#. description
#: ../units/serial/test-plan.pxu:12
msgid "Manual serial tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/snappy/category.pxu:3
msgid "Snappy Ubuntu Core"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:2
msgid "Test that the snap list command is working."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:3
msgid "If snap list command is working then should at least find the"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:3
msgid "ubuntu-core package."
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:12
msgid "Test that the snap find command is working."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:13
msgid "If snap find command is working then should find hello-world"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:13
msgid "in the store."
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:22
msgid "Test the snap install command is able to install test-snapd-tools snap."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:23
msgid ""
"The store should contain the basic test-snapd-tools snap makes sure this can "
"be downloaded and installed on the system."
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:33
msgid ""
"Test the snap remove command is able to remove the test-snapd-tools snap."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:34
msgid "After having installed the test-snapd-tools snap, check it can removed."
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:43
msgid "Test the snap refresh command is able to update the hello snap."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:44
msgid "Check hello snap can be refreshed by snap refresh"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:46
msgid ""
"1. Install\n"
"   snap install hello\n"
"2. Check version number\n"
"   snap list hello\n"
"3. Update\n"
"   snap refresh hello --beta\n"
"4. Check version number\n"
"   snap list hello"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:55
msgid "Check hello version is newer using the beta channel"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:63
msgid "Test the snap revert command is able to revert the hello snap."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:64
msgid "Check hello snap can be reverted by snap revert"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:66
msgid ""
"1. Revert\n"
"   snap revert hello\n"
"2. Check version number\n"
"   snap list hello"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:71
msgid "Check hello version is back to its stable version"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:79
msgid "Test the snap refresh command is able to refresh again the hello snap."
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:80
msgid ""
"Check hello snap can be refreshed after removal of the blacklisted revision"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:82
msgid ""
"1. Remove reverted version (and associated data)\n"
"   snap remove hello --revision=<beta_revision>\n"
"2. Reupdate\n"
"   snap refresh hello --beta\n"
"3. Check version number\n"
"   snap list hello"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:89
msgid "Check hello version is again the one from the beta channel"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:97
msgid "Refresh the system using the snap tool"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:98
msgid "Check \"core\" can be refreshed by snap refresh"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:100
msgid ""
"1. Check version number\n"
"   snap list core\n"
"2. Update\n"
"   snap refresh core --edge\n"
"3. Reboot the system and log in\n"
"   sudo reboot\n"
"4. Check version number\n"
"   snap list core"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:109
msgid "Check core version is newer using the edge channel"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:117
msgid "Rollback system update using the snap tool"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:118
msgid "Check core can be reverted by snap revert"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:120
msgid ""
"1. Check version number\n"
"   snap list core\n"
"2. Revert\n"
"   snap revert core\n"
"3. Reboot the system and log in\n"
"   sudo reboot\n"
"4. Check version number\n"
"   snap list core"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:129
msgid "Check core version is back to its stable version"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:137
msgid "Automatically rollback after failed boot after upgrade"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:138
msgid ""
"Check system will rollback to original core snap if failed to boot the "
"updated one"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:140
msgid ""
"1. Remove reverted version (and associated data)\n"
"   snap remove core --revision=<edge_revision>\n"
"2. Check that the edge revision is back in the refresh list\n"
"   snap refresh --list core\n"
"3. Update\n"
"   snap refresh core --edge\n"
"4. Modify the GRUB Environment Block to simulate a failed boot\n"
"   sudo /usr/bin/grub-editenv /boot/grub/grubenv set snap_mode=trying\n"
"5. Reboot the system and log in\n"
"   sudo reboot\n"
"6. Check version number\n"
"   snap list core"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:153
msgid "Check system is currently booting the stable core version"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:161
msgid "SSH is enabled and operational"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:162
msgid "Check if user can access the system through ssh from other machine"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:164
msgid ""
"1. Execute following command on other machine in same network\n"
"    ssh [user id]@[ip address of the testing system]\n"
"2. Enter password to login"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:168
msgid "Can log into system through ssh from other machine"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:175
msgid "snapweb is enabled"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:176
msgid "Check user can access snapweb from other machine"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:178
msgid ""
"1. Connect Ethernet cable before boot 2. Boot into system 3. Browse "
"following url with browser from other machine in same network\n"
"    http://[ip address of the testing system]:4200"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:183
msgid "Can access snapweb interface"
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:190
msgid "User is able to search the store from snapweb interface"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:191
msgid ""
"Check that the user is able to search the store for snaps to install from "
"the snapweb interface"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:194
msgid ""
"1. Browse following url with browser from other machine in same network\n"
"    http://[ip address of the testing system]:4200\n"
"2. Click on the store link 3. Use the search box to find snaps"
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:199
msgid "A list of snaps available for install is presented."
msgstr ""

#. summary
#: ../units/snappy/snappy.pxu:207
msgid "User is able to install a snap using snapweb interface"
msgstr ""

#. purpose
#: ../units/snappy/snappy.pxu:208
msgid ""
"Check that the user is able to install a snap from the snapweb interface"
msgstr ""

#. steps
#: ../units/snappy/snappy.pxu:210
msgid ""
"1. Click on the \"Install\" button for a snap in the search ouput. 2. Check "
"the button changes to \"Remove\""
msgstr ""

#. verification
#: ../units/snappy/snappy.pxu:213
msgid ""
"Use the command line to list installed snaps. Verify the new snap is "
"installed."
msgstr ""

#. name
#: ../units/snappy/test-plan.pxu:3
msgid "Tests for snap command"
msgstr ""

#. description
#: ../units/snappy/test-plan.pxu:4
msgid ""
"QA test plan that includes generic tests for the snap command for Snappy "
"Ubuntu Core devices."
msgstr ""

#. name
#: ../units/snappy/test-plan.pxu:15
msgid "QA tests for snap command"
msgstr ""

#. description
#: ../units/snappy/test-plan.pxu:16
msgid ""
"QA test that includes manual tests for the snap command for Snappy Ubuntu "
"Core devices."
msgstr ""

#. name
#: ../units/snappy/test-plan.pxu:35
msgid "Automated tests for snap command"
msgstr ""

#. description
#: ../units/snappy/test-plan.pxu:36
msgid ""
"QA test plan that includes automated tests for the snap command for Snappy "
"Ubuntu Core devices."
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:2
msgid "System can be suspended"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:3
msgid "Check the system can suspend successfully"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:5
msgid ""
"1. Execute the following command:\n"
" sudo systemctl suspend"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:8
msgid "System suspends successfully"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:15
msgid "Headphones work (after suspend)"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:16
msgid "Check that headphones work after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:18
msgid ""
"1. Plug in headset to headset port 2. Execute the following command:\n"
" alsamixer\n"
"3. Use arrow key to adjust volume, m key to mute/unmute 4. Make sure all "
"channels are not muted and have an appropriate volume 5. Press q to exit "
"alsamixer 6. Suspend the device 7. Resume the device 6. Execute following "
"command:\n"
" arecord | aplay\n"
"7. Speak in to microphone on headset"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:37
msgid "External microphone works (after suspend)"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:38
msgid "Check that an external microphone works after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:40
msgid ""
"1. Plug headset to headset port 2. Execute following command:\n"
" alsamixer\n"
"3. Use arrow key to adjust volume, m key to mute/unmute 4. Make sure all "
"channels are not muted and have an appropriate volume 5. Press q to exit "
"alsamixer 6. Suspend the device 7. Resume the device 8. Execute following "
"command:\n"
" arecord | aplay\n"
"9. Speak in to microphone on headset"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:52
msgid "Verify that your voice is reproduced through the headphones clearly"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:59
msgid "After suspend, bluetooth keyboard works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:60
msgid ""
"Check a bluetooth input device works after suspending the system. Given "
"Ubuntu is CLI only, this implies a keyboard test."
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:63
msgid ""
"1. Scan nearby devices:\n"
"    hcitool scan\n"
"2. Pair a bluetooth input device\n"
"    bluez-simple-agent hci0 [MAC address of bluetooth input device]\n"
"3. Set paired input device workable\n"
"    sudo bluez-test-input connect [MAC address of bluetooth input device]\n"
"4. Suspend the device 5. Resume the device"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:72
msgid "Can input from input device"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:79
msgid "After suspend, can ping another machine over first Ethernet port"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:82
msgid ""
"1. Make sure Ethernet cable is connected and can access internet 2. Suspend "
"the device 3. Resume the device 4. ping -I eth0 google.com"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:94
msgid "After suspend, can ping another machine over second Ethernet port"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:95
msgid "Check Ethernet works after suspend by pinging another machine"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:97
msgid ""
"1. Make sure Ethernet cable is connected and can access internet 2. Suspend "
"the device 3. Resume the device 4. ping -I eth1 google.com"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:102
msgid "Can successfully get ping responses from google.com"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:109
msgid "After suspend, Power LED behaves correctly"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:110
msgid "Check power LED is on when system is powered on after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:112
msgid ""
"1. Suspend the device 2. Resume the device 3. Check power led when system is "
"powered on"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:123
msgid "After suspend, a Monitor works when connected by DVI"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:124
msgid "Check output to display through DVI port after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:126
msgid ""
"1. Connect display to DVI port 2. Check the display 3. Suspend the device 4. "
"Resume the device"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:138
msgid "After suspend , a Monitor works when connected by HDMI"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:139
msgid "Check output to display through HDMI port after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:141
msgid ""
"1. Connect display to HDMI port 2. Check the display 3. Suspend the device "
"4. Resume the device"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:153
msgid "After suspend, a Monitor works when connected by DVI-to-VGA"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:154
msgid "Check output to display through VGA adaptor on DVI port after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:156
msgid ""
"1. Connect display to VGA adaptor on DVI port 2. Check the display 3. "
"Suspend the device 4. Resume the device"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:168
msgid "After suspend, a Monitor works when connected by HDMI-to-VGA"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:169
msgid "Check output to display through VGA adaptor on HDMI port after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:171
msgid ""
"1. Connect display to VGA adaptor on HDMI port 2. Check the display 3. "
"Suspend the device 4. Resume the device"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:183
msgid "After suspend, the serial debugging console is enabled and operational"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:184
msgid ""
"Check user can still access the test machine through serial port from "
"another machine"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:187
msgid ""
"1. Connect USB to db9 null modem adapter cable to serial port of test "
"machine 2. Connect the cable to USB port of another ubuntu machine (client) "
"3. Install screen on client (if not done in Prerequisite) 4. Execute "
"following command on client:\n"
" sudo screen /dev/ttyUSB0\n"
"5. Start getty service on test machine:\n"
" sudo systemctl start getty@[rs232 device, ex. /dev/ttyS0].service\n"
"6. Log into the test machine from terminal on client 7. Execute following "
"command in screen on client:\n"
" sudo systemctl suspend\n"
"8. Resume the test machine 9. Try to run some commands in terminal on client"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:200
msgid "Can still run commands in terminal on client after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:207
msgid "After suspend, USB keyboard works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:208
msgid "Check USB input device works after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:210
msgid ""
"1. Connect USB keyboard 2. Input some characters with the USB keyboard 3. "
"Suspend the device 4. Wake the device 5. Input some characters with the USB "
"keyboard"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:216
msgid "Confirm the characters are displayed correctly"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:223
msgid "After suspend, USB storage device insertion detected"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:224
msgid "Check system can detect USB storage when inserted after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:226
msgid "1. Press continue 2. Connect USB storage device"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:229
msgid "Can find new USB storage device messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:238
msgid "After suspend, USB storage device read & write works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:239
msgid "Check system can read/write to USB storage correctly after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:241
msgid ""
"1. This task is fully automatic and need USB insertion test was applied "
"first."
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:252
msgid "After suspend, USB storage removal works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:253
msgid "Check system can detect removal of a USB storage device after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:255
msgid "1. Press continue 2. Disconnect USB storage device"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:258
msgid "Can find USB storage device removed messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:267
msgid "After suspend, USB3 storage device insertion detected"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:268
msgid ""
"Check system can detect insertion of a USB3 storage device after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:270
msgid "1. Press continue 2. Connect USB3 storage device"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:273
msgid "Can find new USB3 storage device messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:282
msgid "After suspend, USB3 storage device read & write works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:283
msgid ""
"Check system can read/write to USB3 storage devices correctly after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:285
msgid ""
"1. This task is fully automatic and need USB3 insertion test was applied "
"first."
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:287 ../units/usb/usb.pxu:81
msgid "This task is fully automatic and will verify the result for you."
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:296
msgid "After suspend, USB3 storage removal works"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:297
msgid "Check system can detect USB3 storage removal after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:299
msgid "1. Press continue 2. Disconnect USB3 storage device"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:302
msgid "Can find USB3 storage device removed messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:311
msgid "After suspend, System can discover Wi-Fi networks"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:312
msgid "Check system can find a wireless network AP nearby after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:314
msgid ""
"1. sudo iw dev mlan0 scan 2. Suspend the device 3. Resume the device 4. sudo "
"iw dev mlan0 scan"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:319
msgid "In step 4, can see nearby wireless network AP"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:326
msgid "After suspend, system can connect to unencrypted 802.11ac Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:327
msgid "Check system can connect to insecure 802.11ac AP after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:343
msgid ""
"After suspend, system can connect to unencrypted 802.11b/g Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:344
msgid "Check system can connect to insecure 802.11b/g AP after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:360
msgid "After suspend, system can connect to unencrypted 802.11n Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:361
msgid "Check system can connect to insecure 802.11n AP after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:377
msgid ""
"After suspend, system can connect to WPA-encrypted 802.11ac Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:378
msgid "Check system can connect to 802.11ac AP with wpa security after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:394
msgid ""
"After suspend, system can connect to WPA-encrypted 802.11b/g Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:395
msgid ""
"Check system can connect to 802.11b/g AP with wpa security after suspend"
msgstr ""

#. summary
#: ../units/suspend/jobs.pxu:411
msgid ""
"After suspend, system can connect to WPA-encrypted 802.11n Wi-Fi network"
msgstr ""

#. purpose
#: ../units/suspend/jobs.pxu:412
msgid "Check system can connect to 802.11n AP with wpa security after suspend"
msgstr ""

#. steps
#: ../units/suspend/jobs.pxu:414 ../units/wireless/jobs.pxu:138
msgid ""
"1. Remove all wireless configuration in /etc/network/interfaces and /etc/"
"network/interfaces.d 2. Commence the test"
msgstr ""

#. verification
#: ../units/suspend/jobs.pxu:417 ../units/wireless/jobs.pxu:141
msgid ""
"If there's \"Connection test passed\" message in result, mark the test as "
"passed."
msgstr ""

#. name
#: ../units/suspend/test-plan.pxu:3
msgid "Suspend tests"
msgstr ""

#. description
#: ../units/suspend/test-plan.pxu:4
msgid "QA suspend tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/suspend/test-plan.pxu:12
msgid "Manual suspend tests"
msgstr ""

#. description
#: ../units/suspend/test-plan.pxu:13
msgid "Manual suspend tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/suspend/test-plan.pxu:43
msgid "Automated suspend tests"
msgstr ""

#. description
#: ../units/suspend/test-plan.pxu:44
msgid "Automated suspend tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/tpm/category.pxu:9
msgid "TPM (Trusted Platform Module)"
msgstr ""

#. name
#: ../units/tpm/manifest.pxu:9
msgid "TPM chip"
msgstr ""

#. summary
#: ../units/tpm/sysfs.pxu:11
msgid "Count the number of visible TPM chips in sysfs"
msgstr ""

#. description
#: ../units/tpm/sysfs.pxu:12
msgid ""
"This job just counts the number of visible TPM chips in as reported by tpm-"
"sysfs-resource tool. The only resource attribute is 'count'"
msgstr ""

#. summary
#: ../units/tpm/sysfs.pxu:23
msgid "Collect TPM information from sysfs"
msgstr ""

#. description
#: ../units/tpm/sysfs.pxu:24
msgid ""
"This job collects all the available TPM information from /sys/class/tpm/*/"
"device/*."
msgstr ""

#. summary
#: ../units/tpm/sysfs.pxu:41
msgid "Collect TPM information from sysfs (after taking ownership)"
msgstr ""

#. summary
#: ../units/tpm/sysfs.pxu:58
msgid "Collect TPM information from sysfs (after clearing ownership)"
msgstr ""

#. description
#: ../units/tpm/sysfs.pxu:59
msgid ""
"This job collects all the available TPM information from /sys/class/tpm/*/"
"device/*. Distinct files present there are converted to attributes of "
"resource records."
msgstr ""

#. summary
#: ../units/tpm/sysfs.pxu:74
msgid "Collect DMI information from sysfs"
msgstr ""

#. description
#: ../units/tpm/sysfs.pxu:75
msgid ""
"This job collects all the available DMI information from /sys/class/dmi/id/"
"*. The main purpose of including this job is to allow the provider to "
"include vendor-specific quirks by looking at the sysfs_dmi.bios_vendor "
"attribute."
msgstr ""

#. name
#: ../units/tpm/test-plan.pxu:9
msgid "TPM (Trusted Platform Module) Smoke Tests"
msgstr ""

#. description
#: ../units/tpm/test-plan.pxu:10
msgid ""
"This test plan contains simple tests for the TPM chip. The tests will ensure "
"that the TPM chip is present, is visible by the OS and that ownership over "
"the chip can be taken."
msgstr ""

#. description
#: ../units/tpm/test-plan.pxu:10
msgid "After testing, a number of logs are collected for additional analysis."
msgstr ""

#. name
#: ../units/tpm/test-plan.pxu:43
msgid "Collect TPM (Trusted Platform Module) Information"
msgstr ""

#. description
#: ../units/tpm/test-plan.pxu:44
msgid ""
"This test plan contains a selection of jobs that collect various bits of "
"information about a TPM chip. They are designed to run with an owned TPM "
"chip that uses well-known (20 zero bytes) owner key."
msgstr ""

#. description
#: ../units/tpm/test-plan.pxu:44
msgid ""
"This test plan is not interactive, apart from the manifest collection step."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:10
msgid "Use BIOS to activate a disabled TPM chip"
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:43
msgid "Use BIOS to activate an inactive TPM chip"
msgstr ""

#. purpose
#: ../units/tpm/tpm.pxu:44
msgid "This job will reconfigure the TPM chip to be in the Active state."
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:46
msgid ""
" - Commence the test to restart the machine\n"
" - Enter BIOS using machine-specific hot-key (typically F1, F2, or delete)\n"
" - Navigate to TPM menu, the precise location may depend on your BIOS "
"version\n"
"   and the make and model of your DUT. On some models it is under the\n"
"   following menu: Security / Security Chip.\n"
" - Change the current setting to Active\n"
" - Save BIOS settings\n"
" - Power the machine off (NOTE: a reboot may not be sufficient)\n"
" - Power the machine back on again\n"
" - Let the machine boot\n"
" - Restart the testing application"
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:76
msgid "Clear ownership of the TPM chip"
msgstr ""

#. purpose
#: ../units/tpm/tpm.pxu:77
msgid ""
"This job tries to automatically clear the ownership of an owned TPM chip. It "
"uses well-known owner secret (20 bytes of zeros)."
msgstr ""

#. purpose
#: ../units/tpm/tpm.pxu:77
msgid ""
"NOTE: The actual TPM chip will be cleared after the machine reboots.  After "
"reboot the TPM will be in the default state: unowned, disabled and inactive. "
"Subsequent jobs will instruct test operator to enter BIOS and re-enable the "
"chip."
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:85
msgid "INSTRUCTIONS FOR CLEARING THE TPM CHIP:"
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:85
msgid ""
" - Commence the test to reboot the machine\n"
" - Let the machine boot\n"
" - Restart the testing application"
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:101
msgid "Re-enable TPM chip in BIOS (after clearing ownership)"
msgstr ""

#. purpose
#: ../units/tpm/tpm.pxu:102
msgid ""
"This job will re-enable the TPM chip in the BIOS after having cleared the "
"ownership."
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:104
msgid ""
"To enable the TPM chip in the BIOS, write down the following instructions "
"and exit the testing application."
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:104
msgid "INSTRUCTIONS FOR ENABLING THE TPM CHIP:"
msgstr ""

#. steps
#: ../units/tpm/tpm.pxu:104
msgid ""
" - Commence the test to restart the machine\n"
" - Enter BIOS using machine-specific hot-key (typically F1, F2, or delete)\n"
" - Navigate to TPM menu, the precise location may depend on your BIOS "
"version\n"
"   and the make and model of your DUT. On some models it is under the\n"
"   following menu: Security / Security Chip.\n"
" - Change the current setting to Active. If it is already in the active "
"state\n"
"   then set it to Disabled and then back to Active. This might be a bug in "
"the BIOS.\n"
" - Save BIOS settings\n"
" - Power the machine off (NOTE: a reboot may not be sufficient)\n"
" - Power the machine back on again\n"
" - Let the machine boot\n"
" - Restart the testing application"
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:132
msgid "Take ownership of the TPM chip"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:133
msgid ""
"This job tries to automatically take the ownership of an unowned TPM chip. "
"It uses well-known owner and SRK secretes (20 bytes of zeros)."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:147
msgid "Collect the output of tpm_version"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:148
msgid ""
"This job collects the output of \"tpm_version\" for inspection by a "
"Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:160
msgid "Collect the output of tpm_selftest"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:161
msgid ""
"This job collects the output of \"tpm_selftest\" for inspection by the "
"Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:173
msgid "Collect the output of tpm_setactive --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:174
msgid ""
"This simply collects the output of \"tpm_setactive --status --well-known\" "
"for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:186
msgid "Collect the output of tpm_nvinfo"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:187
msgid ""
"This simply collects the output of \"tpm_nvinfo\" for inspection by a "
"Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:199
msgid "Collect the output of tpm_restrictpubek --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:200
msgid ""
"This simply collects the output of \"tpm_restrictpubek --status --well-known"
"\" for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:212
msgid "Collect the output of tpm_restrictsrk --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:213
msgid ""
"This simply collects the output of \"tpm_restrictsrk --status --well-known\" "
"for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:225
msgid "Collect the output of tpm_setclearable--status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:226
msgid ""
"This simply collects the output of \"tpm_setclearable --status --well-known"
"\" for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:238
msgid "Collect the output of tpm_setenable --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:239
msgid ""
"This simply collects the output of \"tpm_setenable --status --well-known\" "
"for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:251
msgid "Collect the output of tpm_setownable --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:252
msgid ""
"This simply collects the output of \"tpm_setownable --status --well-known\" "
"for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:264
msgid "Collect the output of tpm_setpresence --status --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:265
msgid ""
"This simply collects the output of \"tpm_setpresence --status --well-known\" "
"for inspection by a Certification engineer."
msgstr ""

#. summary
#: ../units/tpm/tpm.pxu:277
msgid "Collect the output of tpm_getpubek --well-known"
msgstr ""

#. description
#: ../units/tpm/tpm.pxu:278
msgid ""
"This simply collects the output of \"tpm_getpubek --well-known\" for "
"inspection by a Certification engineer."
msgstr ""

#. name
#: ../units/usb/category.pxu:3
msgid "USB 2.0"
msgstr ""

#. name
#: ../units/usb/category.pxu:7
msgid "USB 3.0"
msgstr ""

#. name
#: ../units/usb/manifest.pxu:3
msgid "USB Type-C Support"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:3
msgid "USB tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:4
msgid "QA USB tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:11
msgid "Manual USB tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:12
msgid "Manual USB tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:21
msgid "USB3 tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:22
msgid "QA USB3 tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:29
msgid "Manual USB3 tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:30
msgid "Manual USB3 tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:38
msgid "USB-C tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:39
msgid "QA USB-C tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/usb/test-plan.pxu:46
msgid "Manual USB-C tests"
msgstr ""

#. description
#: ../units/usb/test-plan.pxu:47
msgid "Manual USB-C tests for Snappy Ubuntu Core devices"
msgstr ""

#. summary
#: ../units/usb/usb-c.pxu:2
msgid ""
"USB HID work on USB Type-C port using a \"USB Type-C to Type-A\" adapter"
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:3
msgid ""
"    This test will check that you can use a USB HID device plugged in a USB\n"
"    Type-C port using a \"USB Type-C to Type-A\" adapter"
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:6
msgid ""
"    1. Enable either a USB mouse or keyboard by plugging it in the USB Type-"
"C port using a \"USB Type-C to Type-A\" adapter\n"
"    2. For mice, perform actions such as moving the pointer, right and left "
"button clicks and double clicks\n"
"    3. For keyboards, switch to another tty and type some text"
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:19
msgid ""
"    This test will check that the system correctly detects the insertion of\n"
"    a USB 3 storage device in a USB Type-C connector using a \"Type-C to "
"Type-A\"\n"
"    adapter"
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:23
msgid ""
"    1. Commence the test\n"
"    2. Connect a USB 3 storage device to a USB Type-C port using a\n"
"       \"Type-C to Type-A\" adapter\n"
"    3. Do not unplug the device after the test."
msgstr ""

#. description
#: ../units/usb/usb-c.pxu:41
msgid ""
"This test is automated and executes after the usb-c/c-to-a-adapter/insert "
"test is run."
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:55
msgid ""
"    This test will check that the system correctly detects the removal of\n"
"    a USB 3 storage device connected to a USB Type-C port using a \"USB Type-"
"C\n"
"    to Type-A\" adapter."
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:59
msgid ""
"    1. Commence the test\n"
"    2. Disconnect a USB 3 storage device to a USB Type-C port using a\n"
"       \"Type-C to Type-A\" adapter"
msgstr ""

#. summary
#: ../units/usb/usb-c.pxu:77
msgid "USB HID work on USB Type-C port"
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:78
msgid ""
"    This test will check that you can use a USB HID device plugged in a USB\n"
"    Type-C port"
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:81
msgid ""
"    1. Enable either a USB mouse or keyboard by plugging it in the USB Type-"
"C port\n"
"    2. For mice, perform actions such as moving the pointer, right and left "
"button clicks and double clicks\n"
"    3. For keyboards, switch to another tty and type some text"
msgstr ""

#. verification
#: ../units/usb/usb-c.pxu:85
msgid "    Did the device work as expected?"
msgstr ""

#. summary
#: ../units/usb/usb-c.pxu:94
msgid "USB 3.0 storage device insertion detected on USB Type-C port"
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:95
msgid ""
"    This test will check that the system correctly detects the insertion of\n"
"    a USB 3 storage device in a USB Type-C connector"
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:98
msgid ""
"    1. Commence the test\n"
"    2. Connect a USB 3 storage device to a USB Type-C port\n"
"    3. Do not unplug the device after the test."
msgstr ""

#. summary
#: ../units/usb/usb-c.pxu:115
msgid "USB 3.0 storage device read & write works on USB Type-C port"
msgstr ""

#. description
#: ../units/usb/usb-c.pxu:116
msgid "This test is automated and executes after the usb-c/insert test is run."
msgstr ""

#. summary
#: ../units/usb/usb-c.pxu:130
msgid "USB 3.0 storage device removal detected on USB Type-C port"
msgstr ""

#. purpose
#: ../units/usb/usb-c.pxu:131
msgid ""
"    This test will check that the system correctly detects the removal of\n"
"    a USB 3 storage device connected to a USB Type-C port."
msgstr ""

#. steps
#: ../units/usb/usb-c.pxu:134
msgid ""
"    1. Commence the test\n"
"    2. Disconnect a USB 3 storage device to a USB Type-C port"
msgstr ""

#. verification
#: ../units/usb/usb-c.pxu:137
msgid ""
"    The verification of this test is automated. Do not change the\n"
"    automatically selected result."
msgstr ""

#. summary
#: ../units/usb/usb.pxu:2
msgid "USB keyboard works"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:3
msgid "Check USB input device works"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:5
msgid "1. Connect USB keyboard 2. Input somethings with USB keyboard"
msgstr ""

#. verification
#: ../units/usb/usb.pxu:8
msgid "What just input is displayed correctly"
msgstr ""

#. summary
#: ../units/usb/usb.pxu:15
msgid "USB 2.0 storage device insertion detected"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:16
msgid "Check system can detect USB 2.0 storage when inserted"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:18
msgid "1. Press continue 2. Connect USB 2.0 storage device"
msgstr ""

#. verification
#: ../units/usb/usb.pxu:21
msgid "Can find new USB 2.0 storage device messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/usb/usb.pxu:30
msgid "USB 2.0 storage device read & write works"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:31
msgid "Check system can read/write to USB 2.0 storage correctly"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:33
msgid ""
"1. This task is fully automatic and need USB 2.0 insertion test was applied "
"first."
msgstr ""

#. summary
#: ../units/usb/usb.pxu:45
msgid "USB 2.0 storage device removal detected"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:46
msgid "Check system can detect removal of a USB 2.0 storage device"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:48
msgid "1. Press continue 2. Disconnect USB 2.0 storage device"
msgstr ""

#. verification
#: ../units/usb/usb.pxu:51
msgid "Can find USB 2.0 storage device removed messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/usb/usb.pxu:61
msgid "USB 3.0 storage device insertion detected"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:62
msgid "Check system can detect insertion of a USB 3.0 storage device"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:64
msgid "1. Press continue 2. Connect USB 3.0 storage device"
msgstr ""

#. verification
#: ../units/usb/usb.pxu:67
msgid "Can find new USB 3.0 storage device messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/usb/usb.pxu:76
msgid "USB 3.0 storage device read & write works"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:77
msgid "Check system can read/write to USB 3.0 storage devices correctly"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:79
msgid ""
"1. This task is fully automatic and need USB 3.0 insertion test was applied "
"first."
msgstr ""

#. summary
#: ../units/usb/usb.pxu:91
msgid "USB 3.0 storage device removal detected"
msgstr ""

#. purpose
#: ../units/usb/usb.pxu:92
msgid "Check system can detect removal of a USB 3.0 storage device"
msgstr ""

#. steps
#: ../units/usb/usb.pxu:94
msgid "1. Press continue 2. Disconnect USB 3.0 storage device"
msgstr ""

#. verification
#: ../units/usb/usb.pxu:97
msgid "Can find USB 3.0 storage device removed messages in /var/log/syslog"
msgstr ""

#. summary
#: ../units/usb/usb.pxu:112
msgid "Attach output of lsusb"
msgstr ""

#. description
#: ../units/usb/usb.pxu:113
msgid "Attaches a list of detected USB devices."
msgstr ""

#. summary
#: ../units/watchdog/jobs.pxu:2
msgid "Check if the hardware watchdog is properly configured"
msgstr ""

#. summary
#: ../units/watchdog/jobs.pxu:10
msgid "Test that the watchdog module can trigger a system reset"
msgstr ""

#. purpose
#: ../units/watchdog/jobs.pxu:11
msgid ""
"The watchdog module should be capable of issuing a hard reset of the SUT."
msgstr ""

#. steps
#: ../units/watchdog/jobs.pxu:13
msgid ""
"1. Commence the test to trigger a SysRq. 2. Once the watchdog timeout has "
"expired (10s) the SUT should reset itself. 3. The board will reboot and the "
"user should resume the test session."
msgstr ""

#. verification
#: ../units/watchdog/jobs.pxu:17
msgid "Did the board reset itself?"
msgstr ""

#. name
#: ../units/watchdog/test-plan.pxu:3
msgid "Watchdog tests"
msgstr ""

#. description
#: ../units/watchdog/test-plan.pxu:4
msgid "QA test plan that includes watchdog tests"
msgstr ""

#. name
#: ../units/watchdog/test-plan.pxu:14
msgid "Manual watchdog tests"
msgstr ""

#. description
#: ../units/watchdog/test-plan.pxu:15
msgid "Manual watchdog tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/watchdog/test-plan.pxu:21
msgid "Automated watchdog tests"
msgstr ""

#. description
#: ../units/watchdog/test-plan.pxu:22
msgid "QA test plan that includes automated watchdog tests"
msgstr ""

#. name
#: ../units/wireless/category.pxu:3
msgid "Wi-Fi"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:6
msgid "System can discover Wi-Fi networks on {interface}"
msgstr ""

#. description
#: ../units/wireless/jobs.pxu:21
msgid "Check system can find a wireless network AP nearby"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:114
msgid "Connect to WPA-encrypted 802.11b/g Wi-Fi network {interface}"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:156
msgid "Connect to unencrypted 802.11ac Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:157
msgid "Check system can connect to insecure 802.11ac AP"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:186
msgid "Connect to unencrypted 802.11b/g Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:187
msgid "Check system can connect to insecure 802.11b/g AP"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:216
msgid "Connect to unencrypted 802.11n Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:217
msgid "Check system can connect to insecure 802.11n AP"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:246
msgid "Connect to WPA-encrypted 802.11ac Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:247
msgid "Check system can connect to 802.11ac AP with wpa security"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:276
msgid "Connect to WPA-encrypted 802.11b/g Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:277
msgid "Check system can connect to 802.11b/g AP with wpa security"
msgstr ""

#. summary
#: ../units/wireless/jobs.pxu:306
msgid "Connect to WPA-encrypted 802.11n Wi-Fi network on {interface}"
msgstr ""

#. purpose
#: ../units/wireless/jobs.pxu:307
msgid "Check system can connect to 802.11n AP with wpa security"
msgstr ""

#. summary
#: ../units/wireless/resource.pxu:4
msgid "Resource job to identify Wi-Fi devices"
msgstr ""

#. description
#: ../units/wireless/resource.pxu:5
msgid "Job to scan for the presence of Wi-Fi network adapters which"
msgstr ""

#. description
#: ../units/wireless/resource.pxu:5
msgid "should then have the following collection of tests run against them."
msgstr ""

#. name
#: ../units/wireless/test-plan.pxu:3
msgid "Wireless tests"
msgstr ""

#. description
#: ../units/wireless/test-plan.pxu:4
msgid "QA tests for wireless connections"
msgstr ""

#. name
#: ../units/wireless/test-plan.pxu:13
msgid "Manual tests for wireless"
msgstr ""

#. description
#: ../units/wireless/test-plan.pxu:14
msgid "Manual tests wireless"
msgstr ""

#. name
#: ../units/wireless/test-plan.pxu:29
msgid "Automated tests for wireless"
msgstr ""

#. description
#: ../units/wireless/test-plan.pxu:30
msgid ""
"Automated connection tests for unencrypted or WPA-encrypted 802.11 bg, n, ac "
"networks."
msgstr ""

#. name
#: ../units/wireless/test-plan.pxu:46
msgid "QA tests for wifi master mode"
msgstr ""

#. description
#: ../units/wireless/test-plan.pxu:47
msgid "System as Access Point tests"
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:7
msgid "Create open 802.11a Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:13
msgid ""
" Check that the system can create an open 802.11a Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:15
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode a\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security open\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP"
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:36
msgid "Create open 802.11b Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:42
msgid ""
" Check that the system can create an open 802.11b Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:44
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode b\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security open\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP"
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:65
msgid "Create open 802.11g Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:71
msgid ""
" Check that the system can create an open 802.11g Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:73
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode g\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security open\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP"
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:94
msgid "Create open 802.11ad Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:100
msgid ""
" Check that the system can create an open 802.11ad Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:102
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode ad\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security open\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP"
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:123
msgid "Create WPA2 802.11a Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:129
msgid ""
" Check that the system can create a WPA2 802.11a Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:131
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode a\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:153
msgid "Create WPA2 802.11b Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:159
msgid ""
" Check that the system can create a WPA2 802.11b Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:161
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode b\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:183
msgid "Create WPA2 802.11g Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:189
msgid ""
" Check that the system can create a WPA2 802.11g Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:191
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode g\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:213
msgid "Create WPA2 802.11ad Wi-Fi Access Point on {interface} with no STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:219
msgid ""
" Check that the system can create a WPA2 802.11ad Access Point without any "
"STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:221
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode ad\n"
"   $ sudo wifi-ap.config set wifi.interface-mode direct\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
" 3. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 4. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:243
msgid "Create WPA2 802.11a Wi-Fi Access Point on {interface} with active STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:255
msgid ""
" Check that the system can create a WPA2 802.11a Access Point with an "
"already active STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:257
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Connect to an 802.11b/g AP with wpa security:\n"
"   Press Enter to continue\n"
" 3. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode a\n"
"   $ sudo wifi-ap.config set wifi.interface-mode virtual\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
"   $ sudo wifi-ap.config set wifi.channel $(iw dev {interface} info | grep -"
"oP 'channel\\s+\\K\\d+')\n"
" 4. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 5. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:282
msgid "Create WPA2 802.11b Wi-Fi Access Point on {interface} with active STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:294
msgid ""
" Check that the system can create a WPA2 802.11b Access Point with an "
"already active STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:296
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Connect to an 802.11b/g AP with wpa security:\n"
"   Press Enter to continue\n"
" 3. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode b\n"
"   $ sudo wifi-ap.config set wifi.interface-mode virtual\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
"   $ sudo wifi-ap.config set wifi.channel $(iw dev {interface} info | grep -"
"oP 'channel\\s+\\K\\d+')\n"
" 4. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 5. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:321
msgid "Create WPA2 802.11g Wi-Fi Access Point on {interface} with active STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:333
msgid ""
" Check that the system can create a WPA2 802.11g Access Point with an "
"already active STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:335
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Connect to an 802.11b/g AP with wpa security:\n"
"   Press Enter to continue\n"
" 3. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode g\n"
"   $ sudo wifi-ap.config set wifi.interface-mode virtual\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
"   $ sudo wifi-ap.config set wifi.channel $(iw dev {interface} info | grep -"
"oP 'channel\\s+\\K\\d+')\n"
" 4. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 5. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. summary
#: ../units/wireless/wifi-ap.pxu:360
msgid "Create WPA2 802.11ad Wi-Fi Access Point on {interface} with active STA"
msgstr ""

#. purpose
#: ../units/wireless/wifi-ap.pxu:372
msgid ""
" Check that the system can create a WPA2 802.11ad Access Point with an "
"already active STA connection"
msgstr ""

#. steps
#: ../units/wireless/wifi-ap.pxu:374
msgid ""
" 1. Delete existing wireless connections known to Network Manager:\n"
"   $ network-manager.nmcli -t -f TYPE,UUID c | grep -oP \"(?<=^802-11-"
"wireless:).*\" | xargs network-manager.nmcli c delete\n"
" 2. Connect to an 802.11b/g AP with wpa security:\n"
"   Press Enter to continue\n"
" 3. Configure the wifi-ap snap:\n"
"   $ sudo wifi-ap.config set wifi.interface {interface}\n"
"   $ sudo wifi-ap.config set wifi.operation-mode ad\n"
"   $ sudo wifi-ap.config set wifi.interface-mode virtual\n"
"   $ sudo wifi-ap.config set disabled 0\n"
"   $ sudo wifi-ap.config set wifi.security wpa2\n"
"   $ sudo wifi-ap.config set wifi.security-passphrase Test1234\n"
"   $ sudo wifi-ap.config set wifi.channel $(iw dev {interface} info | grep -"
"oP 'channel\\s+\\K\\d+')\n"
" 4. Using a suitable Wi-Fi client try to detect the presence of the AP "
"called \"Ubuntu\"\n"
" 5. Attempt to connect to the AP using password \"Test1234\""
msgstr ""

#. verification
#: ../units/wireless/wifi-ap.pxu:389
msgid " Did the client connect?"
msgstr ""

#. name
#: ../units/wwan/category.pxu:3
msgid "Wireless Wide Area Network"
msgstr ""

#. summary
#: ../units/wwan/jobs.pxu:11
msgid "Identify if WWAN module is missing"
msgstr ""

#. purpose
#: ../units/wwan/jobs.pxu:12
msgid ""
"Tests that there is a WWAN module present and indicates that testing of it "
"should follow."
msgstr ""

#. summary
#: ../units/wwan/jobs.pxu:32
msgid "Verify a GSM broadband modem can create a data connection"
msgstr ""

#. description
#: ../units/wwan/jobs.pxu:33
msgid ""
"Any modems discovered by the resource job that list GSM support will be "
"tested to ensure a data connection can be made."
msgstr ""

#. name
#: ../units/wwan/manifest.pxu:9
msgid "WWAN module"
msgstr ""

#. description
#: ../units/wwan/resource.pxu:13
msgid "Gather device info about WWAN modems"
msgstr ""

#. name
#: ../units/wwan/test-plan.pxu:3
msgid "Wwan tests"
msgstr ""

#. description
#: ../units/wwan/test-plan.pxu:4
msgid "QA wwan tests for Snappy Ubuntu Core devices"
msgstr ""

#. name
#: ../units/wwan/test-plan.pxu:11
msgid "Automated wwan tests"
msgstr ""

#. description
#: ../units/wwan/test-plan.pxu:12
msgid "Automated wwan tests for Snappy Ubuntu Core devices"
msgstr ""
