
id: bluetooth/hid
_summary: Bluetooth input device works
_purpose:
 Check bluetooth input device work
 Since there's only CLI with ubuntu-core, test keyboard only
_steps:
 1. Run following command to start bluetoothctl console:
  sudo bluez.bluetoothctl -a
 ***Following steps are run in bluetoothctl console***
 2. Power on the device:
  power on
 3. Register agent for keyboard:
  agent KeyboardOnly
  default-agent
 4. Put controller in pairable mode:
  pairable on
 5. Scan nearby bluetooth device:
  scan on
 6. Stop Scanning after bluetooth keyboard is found:
  scan off
 7. Pair bluetooth
  pair [MAC address of bluetooth keyboard]
 8. Enter PIN Code on bluetooth keyboard if needed
 9. Trust the bluetooth keyboard
  trust [MAC address of bluetooth keyboard]
 10. Connect to bluetooth keyboard:
  connect [MAC address of bluetooth keyboard]
 11. Quit bluetoothctl console
  quit
 12. Use bluetooth keyboard to input
_verification:
 Can input from bluetooth input device
plugin: manual
category_id: bluetooth
requires: device.category == 'BLUETOOTH'
estimated_duration: 5m

unit: template
template-resource: bluez-internal-rfcomm-tests
template-unit: job
id: bluetooth/bluez-internal-rfcomm-tests_{bluez-internal-rfcomm-test}
category_id: bluetooth_bluez5_selftests
_summary: {bluez-internal-rfcomm-test}
_description:
 Runs a specific test from the rfcomm test suite
plugin: shell
user: root
command:
 rfcomm-tester -p "{bluez-internal-rfcomm-test}"
requires: device.category == 'BLUETOOTH'
estimated_duration: 2.0

unit: template
template-resource: bluez-internal-hci-tests
template-unit: job
id: bluetooth/bluez-internal-hci-tests_{bluez-internal-hci-test}
category_id: bluetooth_bluez5_selftests
_summary: {bluez-internal-hci-test}
_description:
 Runs a specific test from the hci test suite
plugin: shell
user: root
command:
 hci-tester -p "{bluez-internal-hci-test}"
requires: device.category == 'BLUETOOTH'
estimated_duration: 2.0

unit: template
template-resource: bluez-internal-mgmt-tests
template-unit: job
id: bluetooth/bluez-internal-mgmt-tests_{bluez-internal-mgmt-test}
category_id: bluetooth_bluez5_selftests
_summary: {bluez-internal-mgmt-test}
_description:
 Runs a specific test from the mgmt test suite
plugin: shell
user: root
command:
 mgmt-tester -p "{bluez-internal-mgmt-test}"
requires: device.category == 'BLUETOOTH'
estimated_duration: 2.0

unit: template
template-resource: bluez-internal-uc-tests
template-unit: job
id: bluetooth/bluez-internal-uc-tests_{bluez-internal-uc-test}
category_id: bluetooth_bluez5_selftests
_summary: {bluez-internal-uc-test}
_description:
 Runs a specific test from the user channel test suite
plugin: shell
user: root
command:
 userchan-tester -p "{bluez-internal-uc-test}"
requires: device.category == 'BLUETOOTH'
estimated_duration: 2.0

unit: template
template-resource: bluez-internal-bnep-tests
template-unit: job
id: bluetooth/bluez-internal-bnep-tests_{bluez-internal-bnep-test}
category_id: bluetooth
_summary: {bluez-internal-bnep-test}
_description:
 Runs a specific test from the bnep test suite
plugin: shell
user: root
command:
 bnep-tester -p "{bluez-internal-bnep-test}"
requires: device.category == 'BLUETOOTH'
estimated_duration: 2.0

id: bluetooth/keyboard
_summary: Bluetooth keyboard works
_purpose:
 Check if bluetooth keyboard works
_verification:
 Did the keyboard work?
plugin: user-verify
user: root
command: test_bt_keyboard
category_id: bluetooth
estimated_duration: 1m

plugin: shell
category_id: bluetooth
id: bluetooth/file_transfer_stress
estimated_duration: 300.0
requires:
 device.category == 'BLUETOOTH'
command:
  if [ -z "$BTDEVADDR" ]
  then
    echo "btdevaddr option not set to device address of Bluetooth target in plainbox.conf"
    exit 1
  fi
  if rfkill list bluetooth | grep -q 'Hard blocked: yes'
  then
    echo "rfkill list shows BT is hard blocked"
  fi
  if rfkill list bluetooth | grep -q 'Soft blocked: yes'
  then
    echo "rfkill list shows BT is soft blocked, removing before testing"
    rfkill unblock bluetooth
    sleep 3
  fi
  bluetooth_transfer_stress $BTDEVADDR
_summary:
 Bluetooth file transfer stress test
_description:
 This is an automated Bluetooth file transfer test. It sends a large file
 to the device specified by the BTDEVADDR environment variable, then
 retrieves it again using Bluetooth and verifies the checksum to ensure the
 transfer didn't corrupt the file.
