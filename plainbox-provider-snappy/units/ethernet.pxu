unit: category
id: ethernet
_name: Ethernet


id: ethernet/detect
_summary:
 Report info about available network devices
_description:
 Test to detect and return information about available network controllers on
 the system under test.
plugin: shell
category_id: ethernet
requires:
 device.category == 'NETWORK' or device.category == 'WIRELESS'
# package.name == 'kmod' or package.name == 'module-init-tools'
# package.name == 'pciutils'
command: network_device_info
estimated_duration: 2s

unit: template
template-resource: device
template-filter: device.category == 'NETWORK'
id: ethernet/ping_{interface}
_summary: Can ping another machine over Ethernet port {interface}
_description: Check Ethernet works by pinging another machine
plugin: shell
command:
  gateway_ping_test -v --interface {interface}
category_id: ethernet
estimated_duration: 4.0
flags: preserve-locale

unit: template
template-resource: device
template-filter: device.category == 'NETWORK'
id: ethernet/check-disconnected_{interface}
_summary: Ensure ethernet port {interface} is physically disconnected
_purpose:
 Check that ethernet port {interface} is detected as being in the correct state
 to begin a hotplug connection test.
_steps:
 1. Ensure there is no ethernet cable attached to port {interface}.
 2. Begin test.
plugin: user-interact
command:
  if [ $(cat /sys/class/net/{interface}/carrier) -ne 0 ]; then
    # carrier indicating cable present
    exit 1
  fi
  exit 0
category_id: ethernet
estimated_duration: 1.0
flags: preserve-locale

unit: template
template-resource: device
template-filter: device.category == 'NETWORK'
id: ethernet/hotplug-connect_{interface}
_summary: Ethernet port {interface} hotplug detection test
_purpose:
 Check ethernet port {interface} connects when cable inserted. Assumes an IP
 address will be assigned by DHCP. Connection asserted by pinging the network
 defined gateway.
_steps:
 1. Begin the test.
 2. Insert the ethernet cable in to ethernet port {interface}.
 3. This test will timeout and fail if the insertion and connection
    establishment has not been detected (10 second timeout for each check).
plugin: user-interact
command:
 LOOP=0
 CABLE_DETECT=0
 while [ $LOOP -lt 10 ] && [ $CABLE_DETECT -eq 0 ]
 do
  sleep 1
  CABLE_DETECT=$(cat /sys/class/net/{interface}/carrier)
  LOOP=$((LOOP=LOOP+1))
 done
 if [ $CABLE_DETECT -eq 0 ]; then
  echo "Didn't detect a cable insertion"
  exit 1
 fi
 echo "Detected a cable insertion"
 LOOP=0
 OPSTATE="unknown"
 while [ $LOOP -lt 10 ] && [ "$OPSTATE" != "up" ]
 do
  sleep 1
  OPSTATE=$(cat /sys/class/net/{interface}/operstate)
  LOOP=$((LOOP=LOOP+1))
 done
 if [ "$OPSTATE" != "up" ]; then
  echo "Interface did not up"
  exit 1
 fi
 echo "Interface up"
 gateway_ping_test -v --interface {interface}
 PING_TEST=$?
 if [ $PING_TEST -ne 0 ]; then
  echo "Ping test failed"
  exit 1
 fi
 exit 0
category_id: ethernet
estimated_duration: 60.0
depends: ethernet/check-disconnected_{interface}

unit: template
template-resource: device
template-filter: device.category == 'NETWORK'
id: ethernet/hotplug-disconnect_{interface}
_summary: Ethernet port {interface} hotplug disconnect step
_purpose:
 Check that when cable removed from ethernet port {interface} the system
 detects this correctly.
_steps:
 1. Depends on previous hotplug connection test passing. We will now test
  cable disconnection.
 2. Begin the test.
 3. Remove the ethernet cable from ethernet port {interface}.
 4. This test will timeout and fail if the removal has not been detected and
  interface marked as down (10 second timeout for each check).
plugin: user-interact
command:
 LOOP=0
 CABLE_DETECT=1
 while [ $LOOP -lt 10 ] && [ $CABLE_DETECT -ne 0 ]
 do
  sleep 1
  CABLE_DETECT=$(cat /sys/class/net/{interface}/carrier)
  LOOP=$((LOOP=LOOP+1))
 done
 if [ $CABLE_DETECT -ne 0 ]; then
  echo "Didn't detect a cable removal"
  exit 1
 fi
 echo "Detected a cable removal"
 LOOP=0
 OPSTATE="up"
 while [ $LOOP -lt 10 ] && [ "$OPSTATE" == "up" ]
 do
  sleep 1
  OPSTATE=$(cat /sys/class/net/{interface}/operstate)
  LOOP=$((LOOP=LOOP+1))
 done
 if [ "$OPSTATE" == "up" ]; then
  echo "Interface did not go down"
  exit 1
 fi
 echo "Interface went down"
 exit 0
category_id: ethernet
estimated_duration: 20.0
depends: ethernet/hotplug-connect_{interface}
